{"version":3,"sources":["consts.js","components/TodoList.js","components/AppNavbar.js","components/AddTask.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","uriBase","TodoList","props","submitHandler","bind","updateList","state","todolists","_id","axios","delete","then","res","setState","filter","todolist","catch","err","console","log","alert","this","get","useNewUrlParser","useUnifiedTopology","data","error","Container","ListGroup","TransitionGroup","className","map","todos","responsible","CSSTransition","key","timeout","classNames","ListGroupItem","Button","hellojello","variant","size","onClick","e","Component","AppNavbar","isOpen","toggle","Navbar","color","dark","expand","NavbarBrand","href","NavbarToggler","Collapse","navbar","Nav","NavItem","NavLink","AddTask","handleChange","target","getAttribute","value","addTodos","todosAdd","React","createRef","preventDefault","body","post","list","current","onSubmit","type","name","onChange","App","ref","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.04d23101.chunk.js","sourcesContent":["// const uriBase = 'http://localhost:5432';\nconst uriBase = \"https://yuta-todo.herokuapp.com\"\n\nmodule.exports.uriBase = uriBase;","import React, { Component } from 'react';\nimport { Container, ListGroup, ListGroupItem } from 'reactstrap';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport axios from 'axios';\nimport { Button } from 'react-bootstrap';\n// import '../StyleSheets/Modal.css';\nimport { uriBase } from '../consts';\n\nexport default class TodoList extends Component {\n        constructor(props) {\n            super(props);\n            this.submitHandler = this.submitHandler.bind(this);\n            this.updateList = this.updateList.bind(this);\n            this.state = {\n                todolists: []\n            }\n        };\n\n        submitHandler(_id) {\n            axios.delete(`${uriBase}/api/todos/${_id}`)\n            .then(res => {\n                this.setState(state => ({\n                    todolists: state.todolists.filter(todolist => todolist._id !== _id)\n                }))\n            })\n            .catch(err => {\n                console.log(err);\n                alert('Not Working')\n            });\n        };\n\n        componentDidMount() {\n           this.updateList()\n    }\n\n        updateList(_id){\n            axios.get(`${uriBase}/api/todos`, { useNewUrlParser: true, useUnifiedTopology: true })\n            .then(res => { \n                this.setState({ todolists: res.data });\n            }).catch(error => {\n                alert('Not working')\n            });\n        }\n    \n\n    render() {\n        const {todolists} = this.state\n\n        return (\n            <Container>\n            <ListGroup>\n            <TransitionGroup className=\"audiobook-list\" >\n                {todolists.map(({ _id, todos, responsible }) => (\n                    <CSSTransition key={_id} timeout={500} classNames=\"fade\">\n                    <ListGroupItem>\n                    <Button\n                        hellojello={_id}\n                        className=\"remove-btn\"\n                        variant=\"danger\"\n                        size=\"sm\"\n                        onClick={(e) => this.submitHandler(_id)}\n                    >&times;</Button>\n                        {todos}{ ' - ' }{responsible}\n                    </ListGroupItem>\n                    </CSSTransition>\n                ))}\n            </TransitionGroup>\n            </ListGroup>\n            </Container>\n        )\n    }\n}\n","import React, { Component } from 'react';\nimport {\n    Collapse,\n    Navbar,\n    NavbarToggler,\n    NavbarBrand,\n    Nav,\n    NavItem,\n    NavLink,\n    Container\n} from 'reactstrap';\n\nexport class AppNavbar extends Component {\n    state = {\n        isOpen: false\n    }\n\n    toggle = () => {\n        this.setState({\n            isOpen: !this.state.isOpen\n        });\n    }\n\n    render() {\n        return (\n        <div>\n            <Navbar color=\"dark\" dark expand=\"sm\" className=\"mb-5\">\n                <Container>\n                    <NavbarBrand href=\"/\">Task List</NavbarBrand>\n                    <NavbarToggler onClick={this.toggle} />\n                    <Collapse isOpen={this.state.isOpen} navbar>\n                        <Nav className=\"ml-auto\" navbar>\n                            <NavItem>\n                                <NavLink href=\"https://github.com/yutah94\">\n                                    GitHub\n                                </NavLink>\n                            </NavItem>\n                        </Nav>\n                    </Collapse>\n                </Container>\n            </Navbar>\n        </div>\n        );\n    }\n}\n\n\n\nexport default AppNavbar\n","import React, { Component } from 'react';\n// import '../StyleSheets/Modal.css';\nimport axios from 'axios';\nimport { uriBase } from '../consts';\n\nexport class AddTask extends Component {\n    constructor(props) {\n        super(props);\n        this.addTodos = this.addTodos.bind(this);\n        this.todosAdd = React.createRef();\n        this.state = {\n            todos: '',\n            responsible: ''\n        }\n    };\n\n    handleChange = e => {\n        const state = {};\n        state[e.target.getAttribute('name')] = e.target.value;\n        this.setState(state)\n    }\n\n    addTodos(e) {\n        e.preventDefault()\n        const body = { todos: this.state.todos, responsible: this.state.responsible }\n        axios.post(`${uriBase}/api/todos/`, body )\n        .then(res => {\n            console.log(res)\n        })\n        .then(res => {\n            this.props.list.current.updateList();\n        })\n        .catch(err => {\n            console.log(err);\n        });\n    };\n    \n    \n    render() {\n        return (\n            <form onSubmit={this.addTodos} className=\"container\">\n                <label className=\"form-inline\">\n                    <h4 className=\"gimmespace\">Task:</h4>\n                        <input \n                            type=\"text\" \n                            className=\"form-control\"\n                            name=\"todos\"\n                            onChange={this.handleChange}\n                            />\n                    <h4 className=\"gimmespace\">Responsible:</h4>\n                        <input \n                            type=\"text\" \n                            className=\"form-control\"\n                            name=\"responsible\" \n                            onChange={this.handleChange}\n                            />\n                        <input \n                        type=\"submit\" \n                        className=\"form-control btn btn-warning f\"\n                        value=\"Add Todos\"\n                        onClick={this.addTodos}\n                        />\n                </label>\n            </form>\n        ) \n    }\n}\n\nexport default AddTask;","import React, { Component } from 'react';\nimport './App.css';\n// import 'bootstrap/dist/css/bootstrap.min.css'\n\nimport TodoList from './components/TodoList';\nimport AppNavbar from './components/AppNavbar';\nimport AddTask from './components/AddTask';\n// import './StyleSheets/Modal.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.todosAdd = React.createRef();\n};\n\n  render() {\n    return (\n      <div className=\"App\">\n      <AppNavbar />\n      <AddTask list={this.todosAdd} />\n      <TodoList ref={this.todosAdd} />\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}